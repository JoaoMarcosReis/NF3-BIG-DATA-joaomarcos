# -*- coding: utf-8 -*-
"""NF3-BIG-DATA-JoaoMarcos

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/153xP3Gci1QIgBnnbeYYoIxbZyxFLo40g

Exercício 1
"""

from google.colab import files
uploaded = files.upload()

"""**1.a)**"""

import pandas as pd

# Ler o arquivo CSV
df = pd.read_csv('world_alcohol.csv')

# Agrupar os dados por tipo de bebida
grouped = df.groupby('Beverage Types')

# Exibir o resultado
for name, group in grouped:
    print(name)
    print(group)
    print('\n')

"""**1.b)**"""

import pandas as pd

# Ler o arquivo CSV
df = pd.read_csv('world_alcohol.csv')

# Agrupar os dados por região e por ano
grouped = df.groupby(['WHO region', 'Year'])

# Exibir o resultado
for name, group in grouped:
    print(name)
    print(group)
    print('\n')

"""**1.c)**"""

import pandas as pd

# Ler o arquivo CSV
df = pd.read_csv('world_alcohol.csv')

# Agrupar os dados por tipo de bebida
grouped = df.groupby('Beverage Types')

# Contar ocorrência de regiões, países e somar valores por bebida
for name, group in grouped:
    print(name)
    print('Regiões:', group['WHO region'].nunique())
    print('Países:', group['Country'].nunique())
    print('Soma dos Valores:', group['Display Value'].sum())
    print('\n')

"""**1.d)**"""

import pandas as pd
import matplotlib.pyplot as plt

# Ler o arquivo CSV
df = pd.read_csv('world_alcohol.csv')

# Agrupar os dados por tipo de bebida
grouped = df.groupby('Beverage Types')

# Calcular as estatísticas descritivas
statistics = grouped['Display Value'].describe()

# Calcular a média
mean = grouped['Display Value'].mean()

# Calcular a moda
mode = grouped['Display Value'].apply(lambda x: x.mode().iloc[0])

# Calcular a mediana
median = grouped['Display Value'].median()

# Exibir as estatísticas descritivas
print(statistics)
print('\n')

# Exibir a média
print("Média:")
print(mean)
print('\n')

# Exibir a moda
print("Moda:")
print(mode)
print('\n')

# Exibir a mediana
print("Mediana:")
print(median)
print('\n')

# Gráfico de comparação dos valores agrupados por tipo de bebida
fig, ax = plt.subplots()
grouped['Display Value'].mean().plot(kind='bar', ax=ax)
ax.set_xlabel('Tipo de Bebida')
ax.set_ylabel('Média dos Valores')
ax.set_title('Comparação dos Valores por Tipo de Bebida')
plt.show()

"""**1.d)i/ii**"""

import pandas as pd

# Ler o arquivo CSV
df = pd.read_csv('world_alcohol.csv')


# Mostrar a coluna de bebidas do ano de 1985
print("Bebidas do ano de 1985:")
beverages_1985 = df[df['Year'] == 1985]['Beverage Types']
print(beverages_1985)
print('\n')

print("Regiões com valores maiores que 4:")
# Filtra os valores da coluna 'WHO Region' acima de 4
filtered_data = data[data['Display Value'] > 4]
region_column = filtered_data['WHO region']

# Exibe a coluna 'WHO region' filtrada
print(region_column)

"""Exercício 2"""

from google.colab import files
uploaded = files.upload()

"""**2.a)**"""

import pandas as pd

# Lê o arquivo CSV
data = pd.read_excel('cursos-prouni.csv.xlsx')

# Lista das colunas de notas a serem limpas
colunas_notas = ['nota_integral_ampla', 'nota_integral_cotas', 'nota_parcial_ampla', 'nota_parcial_cotas']

# Efetua a limpeza das colunas de notas
data[colunas_notas] = data[colunas_notas].fillna(0.0)

# Salva o arquivo atualizado
data.to_excel('cursos-prouni_limpo.xlsx', index=False)

"""**2.b)**"""

import pandas as pd

# Lê o arquivo CSV
data = pd.read_excel('cursos-prouni.csv.xlsx')

# Agrupa os dados pelo campo "grau"
grau_grouped = data.groupby('grau')

# Itera sobre os grupos e exibe as informações
for name, group in grau_grouped:
    print("Grau:", name)
    print(group)
    print('\n')

"""**2.c)**"""

import pandas as pd

# Lê o arquivo CSV
data = pd.read_excel('cursos-prouni.csv.xlsx')

# Seleciona apenas os cursos de Matemática, Medicina e Pedagogia
selected_courses = data[data['curso_busca'].isin(['Matemática', 'Medicina', 'Pedagogia'])]

# Agrupa os dados pelos cursos selecionados
curso_grouped = selected_courses.groupby('curso_busca')

# Itera sobre os grupos e exibe as informações
for name, group in curso_grouped:
    print("Curso:", name)
    print(group)
    print('\n')

"""**2.d)**"""

import pandas as pd

# Lê o arquivo CSV
data = pd.read_excel('cursos-prouni.csv.xlsx')

# Agrupa os dados por Estado e calcula a média das notas de corte por Estado
estado_grouped = data.groupby('uf_busca')['nota_integral_ampla', 'nota_integral_cotas', 'nota_parcial_ampla', 'nota_parcial_cotas'].mean()

# Exibe a média de notas de corte por Estado
print(estado_grouped)

"""**2.e)**"""

import pandas as pd

# Lê o arquivo CSV
data = pd.read_excel('cursos-prouni.csv.xlsx')

# Filtra os cursos Tecnológicos
tecnologicos_data = data[data['grau'] == 'Tecnológico']

# Agrupa os dados pelos cursos Tecnológicos
tecnologicos_grouped = tecnologicos_data.groupby('curso_busca')

# Exibe o resultado do agrupamento
for name, group in tecnologicos_grouped:
    print("Curso:", name)
    print(group)
    print('\n')

"""**2.f)**"""

import pandas as pd

# Lê o arquivo CSV
data = pd.read_excel('cursos-prouni.csv.xlsx')

# Elimina a coluna "cidade_filtro"
data = data.drop('cidade_filtro', axis=1)

# Exibe o dataframe resultante
print(data)

"""**2.g)**"""

import pandas as pd

# Lê o arquivo CSV
data = pd.read_excel('cursos-prouni.csv.xlsx')

# Filtra os cursos de Medicina
medicina_data = data[data['curso_busca'] == 'Medicina']

# Calcula a média das mensalidades dos cursos de Medicina
media_mensalidades = medicina_data['mensalidade'].mean()

# Exibe a média das mensalidades dos cursos de Medicina
print('Média das mensalidades dos cursos de Medicina:', media_mensalidades)

"""**2.h)**"""

import pandas as pd

# Lê o arquivo CSV
data = pd.read_excel('cursos-prouni.csv.xlsx')

# Filtra apenas os cursos em tempo integral
integral_data = data[data['turno'] == 'INTEGRAL']

# Filtra apenas os cursos em tempo integral e seleciona a coluna 'nota_integral_ampla'
notas_integral = integral_data['nota_integral_ampla']

# Remove os valores nulos
notas_integral_validas = notas_integral.dropna()

# Verifica se há valores válidos para calcular a média
if notas_integral_validas.empty:
    print("Não há valores válidos para calcular a média das notas de corte dos cursos em tempo integral.")
else:
    # Calcula a média das notas de corte
    media_notas_integral = notas_integral_validas.mean()

    # Exibe a média das notas de corte dos cursos em tempo integral
    print("Média das notas de corte dos cursos em tempo integral:", media_notas_integral)

"""**2.i)**"""

import pandas as pd

# Lê o arquivo CSV
data = pd.read_excel('cursos-prouni.csv.xlsx')

# Filtra apenas os cursos de Bacharelado
bacharelado_data = data[data['grau'] == 'Bacharelado']

# Seleciona a coluna 'nota_integral_ampla' dos cursos de Bacharelado
notas_bacharelado = bacharelado_data['nota_integral_ampla']

# Remove os valores nulos
notas_bacharelado_validas = notas_bacharelado.dropna()

# Calcula a estatística descritiva das notas de corte
estatisticas_descritivas = notas_bacharelado_validas.describe()

# Exibe as estatísticas descritivas
print(estatisticas_descritivas)

"""**2.j)**"""

import pandas as pd
import matplotlib.pyplot as plt

# Lê o arquivo CSV
data = pd.read_excel('cursos-prouni.csv.xlsx')

# Filtra apenas as colunas necessárias
filtered_data = data[['grau', 'nota_integral_cotas']]

# Agrupa os dados pelo grau e calcula a média das notas integrais de cotas
grouped_data = filtered_data.groupby('grau')['nota_integral_cotas'].mean()

# Cria uma lista com os graus e outra com as médias das notas integrais de cotas
graus = grouped_data.index
medias_notas = grouped_data.values

# Cria o gráfico de barras agrupado
plt.bar(graus, medias_notas)

# Define o título do gráfico e dos eixos
plt.title('Comparativo entre os Graus dos Cursos pelas Notas de Cotas')
plt.xlabel('Grau')
plt.ylabel('Média das Notas de Cotas')

# Exibe o gráfico
plt.show()